/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterFazGraFica;

import Clases.*;
import Interfaces.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lithium582
 */
public class frmBuscarArticulos extends javax.swing.JFrame {

    private final Farmacia farmaArticulos;
    /**
     * Creates new form NuevoArticulo
     */
    
    public frmBuscarArticulos() {
        initComponents();
        
        farmaArticulos = null;
        this.setSize(900,500);
        
        this.setResizable(false);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2,
                dim.height / 2 - this.getSize().height / 2);
    }
    
    public frmBuscarArticulos(Farmacia pFarma) {
        initComponents();
        
        farmaArticulos = pFarma;
        
        this.dgArticulos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.dgArticulos.setRowSelectionAllowed(true);
        this.dgArticulos.setRowSelectionAllowed(true);
        
        this.setSize(900,500);
        
        this.setResizable(false);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2,
                dim.height / 2 - this.getSize().height / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBuscarXID = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        txtIDArticulo = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblPrecio = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        lblPrecio1 = new javax.swing.JLabel();
        txtArea = new javax.swing.JTextField();
        btnBuscarXNombre = new javax.swing.JButton();
        btnBuscarXDescripcion = new javax.swing.JButton();
        btnBuscarXArea = new javax.swing.JButton();
        btnCerrarForm = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dgArticulos = new javax.swing.JTable();
        btnLimpiarGrilla = new javax.swing.JButton();
        btnBuscarXAno = new javax.swing.JButton();
        lblAnoVencimiento = new javax.swing.JLabel();
        txtAnoVencimiento = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Buscar Artículos");

        btnBuscarXID.setText("Buscar");
        btnBuscarXID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarXIDActionPerformed(evt);
            }
        });

        lblID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblID.setText("Buscar por ID");

        txtIDArticulo.setToolTipText("ID de Artículo");
        txtIDArticulo.setName(""); // NOI18N

        lblNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombre.setText("Buscar por Nombre");

        txtNombre.setToolTipText("Nombre de Artículo");
        txtNombre.setName(""); // NOI18N

        lblPrecio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrecio.setText("Buscar por Descripción");

        txtDescripcion.setToolTipText("Precio de Artículo");
        txtDescripcion.setName(""); // NOI18N

        lblPrecio1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrecio1.setText("Buscar por Area de Aplicación");

        txtArea.setToolTipText("Precio de Artículo");
        txtArea.setName(""); // NOI18N

        btnBuscarXNombre.setText("Buscar");
        btnBuscarXNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarXNombreActionPerformed(evt);
            }
        });

        btnBuscarXDescripcion.setText("Buscar");
        btnBuscarXDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarXDescripcionActionPerformed(evt);
            }
        });

        btnBuscarXArea.setText("Buscar");
        btnBuscarXArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarXAreaActionPerformed(evt);
            }
        });

        btnCerrarForm.setText("Cerrar");
        btnCerrarForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarFormActionPerformed(evt);
            }
        });

        dgArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID","Nombre","Descripción","Precio","Fecha_Creacion","Fecha_Actualizacion", "Stock", "Año de Vencimiento", "Refrigerado", "Receta", "Estado"
            }
        ));
        jScrollPane1.setViewportView(dgArticulos);

        btnLimpiarGrilla.setText("Limpiar");
        btnLimpiarGrilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarGrillaActionPerformed(evt);
            }
        });

        btnBuscarXAno.setText("Buscar");
        btnBuscarXAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarXAnoActionPerformed(evt);
            }
        });

        lblAnoVencimiento.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnoVencimiento.setText("Buscar por Año de Vencimiento");

        txtAnoVencimiento.setToolTipText("Precio de Artículo");
        txtAnoVencimiento.setName(""); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblAnoVencimiento)
                                .addGap(23, 23, 23)
                                .addComponent(txtAnoVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPrecio1)
                                .addGap(30, 30, 30)
                                .addComponent(txtArea))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblID)
                                    .addComponent(lblPrecio))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre)
                                    .addComponent(txtIDArticulo)
                                    .addComponent(txtDescripcion))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBuscarXArea, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                            .addComponent(btnBuscarXDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuscarXNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuscarXID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuscarXAno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLimpiarGrilla, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(btnCerrarForm, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtIDArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarXID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombre)
                    .addComponent(btnBuscarXNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrecio)
                    .addComponent(btnBuscarXDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrecio1)
                    .addComponent(btnBuscarXArea, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAnoVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAnoVencimiento)
                    .addComponent(btnBuscarXAno, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiarGrilla, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCerrarForm, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblPrecio.getAccessibleContext().setAccessibleName("Preci");

        getAccessibleContext().setAccessibleName("Búsquedas de Artículos");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarXIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarXIDActionPerformed
        try{
            String idArt = this.txtIDArticulo.getText();
            
            if (idArt.equals("")){
                JOptionPane.showMessageDialog(null, "El campo ID no puede ser vacío", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                Integer numIdArt = Integer.parseInt(idArt);
                String[] strArea = new String[1];
                IArticulo a = this.farmaArticulos.BuscarArticuloXID(numIdArt, strArea);

                if(a != null){
                    JOptionPane.showMessageDialog(null, "Área: " + strArea[0] + "\n" + a.toString(), "Artículo encontrado", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(null, "No se ha encontrado ningún artículo con el ID: " + idArt, "Atención", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Ha habido un error al leer los datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarXIDActionPerformed

    private void btnBuscarXNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarXNombreActionPerformed
        try{
            String nomArt = this.txtNombre.getText();
            
            if (nomArt.equals("")){
                JOptionPane.showMessageDialog(null, "El campo nombre no puede ser vacío", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                ILista<IArticulo> listaArticulos = new Lista<IArticulo>();
                listaArticulos = farmaArticulos.listarXNombre(nomArt);

                this.dgArticulos.setRowSelectionAllowed(true);
                this.dgArticulos.setRowSelectionAllowed(true);
                DefaultTableModel elementTable = (DefaultTableModel) this.dgArticulos.getModel();
                elementTable.setRowCount(0);
                
                INodoLista<IArticulo> nodoActual = listaArticulos.getPrimero();
                
                if(nodoActual == null){
                    JOptionPane.showMessageDialog(null, "No se han encontrado artículos con ese nombre", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    while (nodoActual != null){
                        IArticulo articuloActual = nodoActual.getObjeto();

                            if (articuloActual != null){
                                String[] prodInfo = new String[12];
                                prodInfo[0] = articuloActual.getID().toString();
                                prodInfo[1] = articuloActual.getNombre();
                                prodInfo[2] = articuloActual.getDescripcion();
                                prodInfo[3] = Double.toString(articuloActual.getPrecio());
                                prodInfo[4] = articuloActual.getFechaCreacion().toString();
                                prodInfo[5] = articuloActual.getFechaActualizacion().toString();
                                prodInfo[6] = Integer.toString(articuloActual.getStock());
                                prodInfo[7] = Integer.toString(articuloActual.getAnoVencimiento());
                                prodInfo[8] = Boolean.toString(articuloActual.getRefrigerado());
                                prodInfo[9] = Boolean.toString(articuloActual.getReceta());
                                prodInfo[10] = Boolean.toString(articuloActual.getEstado());

                                elementTable.addRow(prodInfo);
                            }
                        nodoActual = nodoActual.getSiguiente();
                    }
                }
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Ha habido un error al leer los datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarXNombreActionPerformed

    private void btnBuscarXDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarXDescripcionActionPerformed
        try{
            String desArt = this.txtDescripcion.getText();
            
            if (desArt.equals("")){
                JOptionPane.showMessageDialog(null, "El campo nombre no puede ser vacío", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                ILista<IArticulo> listaArticulos = new Lista<IArticulo>();
                listaArticulos = farmaArticulos.listarXDescripcion(desArt);

                this.dgArticulos.setRowSelectionAllowed(true);
                this.dgArticulos.setRowSelectionAllowed(true);
                DefaultTableModel elementTable = (DefaultTableModel) this.dgArticulos.getModel();
                elementTable.setRowCount(0);
                
                INodoLista<IArticulo> nodoActual = listaArticulos.getPrimero();
                
                if(nodoActual == null){
                    JOptionPane.showMessageDialog(null, "No se han encontrado artículos con ese nombre", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    while (nodoActual != null){
                        IArticulo articuloActual = nodoActual.getObjeto();

                            if (articuloActual != null){
                                String[] prodInfo = new String[12];
                                prodInfo[0] = articuloActual.getID().toString();
                                prodInfo[1] = articuloActual.getNombre();
                                prodInfo[2] = articuloActual.getDescripcion();
                                prodInfo[3] = Double.toString(articuloActual.getPrecio());
                                prodInfo[4] = articuloActual.getFechaCreacion().toString();
                                prodInfo[5] = articuloActual.getFechaActualizacion().toString();
                                prodInfo[6] = Integer.toString(articuloActual.getStock());
                                prodInfo[7] = Integer.toString(articuloActual.getAnoVencimiento());
                                prodInfo[8] = Boolean.toString(articuloActual.getRefrigerado());
                                prodInfo[9] = Boolean.toString(articuloActual.getReceta());
                                prodInfo[10] = Boolean.toString(articuloActual.getEstado());

                                elementTable.addRow(prodInfo);
                            }
                        nodoActual = nodoActual.getSiguiente();
                    }
                }
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Ha habido un error al leer los datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarXDescripcionActionPerformed

    private void LimpiarTabla(){
        DefaultTableModel elementTable = (DefaultTableModel) this.dgArticulos.getModel();
        
        for (int i = 0; i < elementTable.getRowCount(); i++){
            
        }
    }
    
    private void btnBuscarXAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarXAreaActionPerformed
        try{
            String areaBuscada = this.txtArea.getText();
            
            if (areaBuscada.equals("")){
                JOptionPane.showMessageDialog(null, "El campo nombre no puede ser vacío", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                ILista<IArticulo> listaArticulos = new Lista<IArticulo>();
                listaArticulos = farmaArticulos.listarArticulosXArea(areaBuscada,"");

                this.dgArticulos.setRowSelectionAllowed(true);
                this.dgArticulos.setRowSelectionAllowed(true);
                DefaultTableModel elementTable = (DefaultTableModel) this.dgArticulos.getModel();
                elementTable.setRowCount(0);
                
                INodoLista<IArticulo> nodoActual = listaArticulos.getPrimero();
                
                if(nodoActual == null){
                    JOptionPane.showMessageDialog(null, "No se han encontrado artículos en dicha área", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    while (nodoActual != null){
                        IArticulo articuloActual = nodoActual.getObjeto();

                            if (articuloActual != null){
                                String[] prodInfo = new String[12];
                                prodInfo[0] = articuloActual.getID().toString();
                                prodInfo[1] = articuloActual.getNombre();
                                prodInfo[2] = articuloActual.getDescripcion();
                                prodInfo[3] = Double.toString(articuloActual.getPrecio());
                                prodInfo[4] = articuloActual.getFechaCreacion().toString();
                                prodInfo[5] = articuloActual.getFechaActualizacion().toString();
                                prodInfo[6] = Integer.toString(articuloActual.getStock());
                                prodInfo[7] = Integer.toString(articuloActual.getAnoVencimiento());
                                prodInfo[8] = Boolean.toString(articuloActual.getRefrigerado());
                                prodInfo[9] = Boolean.toString(articuloActual.getReceta());
                                prodInfo[10] = Boolean.toString(articuloActual.getEstado());

                                elementTable.addRow(prodInfo);
                            }
                        nodoActual = nodoActual.getSiguiente();
                    }
                }
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Ha habido un error al leer los datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarXAreaActionPerformed

    private void btnCerrarFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarFormActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarFormActionPerformed

    private void btnLimpiarGrillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarGrillaActionPerformed
        DefaultTableModel elementTable = (DefaultTableModel) this.dgArticulos.getModel();
        elementTable.setRowCount(0);
    }//GEN-LAST:event_btnLimpiarGrillaActionPerformed

    private void btnBuscarXAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarXAnoActionPerformed
        try{
            String anoVencimiento = this.txtAnoVencimiento.getText();
            
            if (anoVencimiento.equals("")){
                JOptionPane.showMessageDialog(null, "El campo Año no puede ser vacío", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                ILista<IArticulo> listaArticulos = new Lista<IArticulo>();
                listaArticulos = farmaArticulos.buscarArticulosXAnoVencimiento(anoVencimiento);

                this.dgArticulos.setRowSelectionAllowed(true);
                this.dgArticulos.setRowSelectionAllowed(true);
                DefaultTableModel elementTable = (DefaultTableModel) this.dgArticulos.getModel();
                elementTable.setRowCount(0);
                
                INodoLista<IArticulo> nodoActual = listaArticulos.getPrimero();
                
                if(nodoActual == null){
                    JOptionPane.showMessageDialog(null, "No se han encontrado artículos cuyo vencimiento sea en dicho año", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    while (nodoActual != null){
                        IArticulo articuloActual = nodoActual.getObjeto();

                            if (articuloActual != null){
                                String[] prodInfo = new String[12];
                                prodInfo[0] = articuloActual.getID().toString();
                                prodInfo[1] = articuloActual.getNombre();
                                prodInfo[2] = articuloActual.getDescripcion();
                                prodInfo[3] = Double.toString(articuloActual.getPrecio());
                                prodInfo[4] = articuloActual.getFechaCreacion().toString();
                                prodInfo[5] = articuloActual.getFechaActualizacion().toString();
                                prodInfo[6] = Integer.toString(articuloActual.getStock());
                                prodInfo[7] = Integer.toString(articuloActual.getAnoVencimiento());
                                prodInfo[8] = Boolean.toString(articuloActual.getRefrigerado());
                                prodInfo[9] = Boolean.toString(articuloActual.getReceta());
                                prodInfo[10] = Boolean.toString(articuloActual.getEstado());

                                elementTable.addRow(prodInfo);
                            }
                        nodoActual = nodoActual.getSiguiente();
                    }
                }
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Ha habido un error al leer los datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarXAnoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmBuscarArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmBuscarArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmBuscarArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmBuscarArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmBuscarArticulos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarXAno;
    private javax.swing.JButton btnBuscarXArea;
    private javax.swing.JButton btnBuscarXDescripcion;
    private javax.swing.JButton btnBuscarXID;
    private javax.swing.JButton btnBuscarXNombre;
    private javax.swing.JButton btnCerrarForm;
    private javax.swing.JButton btnLimpiarGrilla;
    private javax.swing.JTable dgArticulos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnoVencimiento;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblPrecio1;
    private javax.swing.JTextField txtAnoVencimiento;
    private javax.swing.JTextField txtArea;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtIDArticulo;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
